import pytest
from unittest.mock import Mock, patch, MagicMock
import sys
import os

# Add the parent directory to the path to import the module
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from merge_stocks_data import fetch_existing_stocks


class TestFetchExistingStocks:
    """Test cases for fetch_existing_stocks function."""
    
    @patch('merge_stocks_data.supabase')
    def test_fetch_existing_stocks_success(self, mock_supabase):
        """Test successful fetching of existing stocks."""
        # Arrange
        mock_response = Mock()
        mock_response.data = [
            {'id': 1, 'ticker': 'AAPL', 'market_cap': 2500000000000},
            {'id': 2, 'ticker': 'GOOGL', 'market_cap': 1800000000000},
            {'id': 3, 'ticker': 'MSFT', 'market_cap': None}
        ]
        mock_supabase.table.return_value.select.return_value.execute.return_value = mock_response
        
        # Act
        result = fetch_existing_stocks()
        
        # Assert
        expected = {
            'AAPL': {'id': 1, 'market_cap': 2500000000000},
            'GOOGL': {'id': 2, 'market_cap': 1800000000000},
            'MSFT': {'id': 3, 'market_cap': None}
        }
        assert result == expected
        mock_supabase.table.assert_called_once_with('stocks_search')
        mock_supabase.table.return_value.select.assert_called_once_with('id', 'ticker', 'market_cap')
    
    @patch('merge_stocks_data.supabase')
    def test_fetch_existing_stocks_empty_result(self, mock_supabase):
        """Test fetching when no stocks exist in database."""
        # Arrange
        mock_response = Mock()
        mock_response.data = []
        mock_supabase.table.return_value.select.return_value.execute.return_value = mock_response
        
        # Act
        result = fetch_existing_stocks()
        
        # Assert
        assert result == {}
    
    @patch('merge_stocks_data.supabase')
    def test_fetch_existing_stocks_database_error(self, mock_supabase):
        """Test handling of database errors during fetch."""
        # Arrange
        mock_supabase.table.return_value.select.return_value.execute.side_effect = Exception("Database connection error")
        
        # Act & Assert
        with pytest.raises(Exception) as exc_info:
            fetch_existing_stocks()
        
        assert "Database connection error" in str(exc_info.value)
    
    @patch('merge_stocks_data.supabase', None)
    def test_fetch_existing_stocks_no_supabase_client(self):
        """Test behavior when supabase client is None."""
        # Act & Assert
        with pytest.raises(AttributeError):
            fetch_existing_stocks()
